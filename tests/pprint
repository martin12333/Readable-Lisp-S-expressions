#! /usr/bin/env guile
!#
; Filter to pretty-print a file in traditional S-expression Scheme format.
; Requires Guile.
;
; Copyright (C) 2006-2012 David A. Wheeler.
;
; This software is released as open source software under the "MIT" license:
;
; Permission is hereby granted, free of charge, to any person obtaining a
; copy of this software and associated documentation files (the "Software"),
; to deal in the Software without restriction, including without limitation
; the rights to use, copy, modify, merge, publish, distribute, sublicense,
; and/or sell copies of the Software, and to permit persons to whom the
; Software is furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; TODO: Handle end-of-line more gracefully.


(use-modules (ice-9 pretty-print))

(define carriage-return (integer->char 13))

; Copy one line from stdin to stdout, end on EOF or newline.
(define (copy-line port)
  (let ((c (peek-char port)))
    (cond ((eof-object? c) c)
          ((char=? c #\newline) c)
          ((char=? c carriage-return) c)
          (#t (display (read-char port)) (copy-line port)))))


; (pretty-print obj port)

; filter stdin to stdout, reading in traditional s-expressions and outputting
; sweet-expressions.  Preserve the comments outside an s-expression.
(define (pprint-filter)
  (let ((c (peek-char (current-input-port))))
    (cond ((eof-object? c) c)
          ((char=? c #\;)
           (copy-line (current-input-port))
           (pprint-filter))
          ((or (char=? c #\newline) (char=? c carriage-return))
            (display (read-char))
            (if (not (eof-object? (peek-char)))
              (pprint-filter)))
          (#t
           (let ((result (read (current-input-port))))
             (if (eof-object? result)
               result
               (begin (pretty-print result)
                  (if (eq? (peek-char) #\newline) (read-char))
                  (pprint-filter))))))))

(pprint-filter)
