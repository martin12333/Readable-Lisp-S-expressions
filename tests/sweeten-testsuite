; Tests for sweeten.
xyz
(simplelist)
(a)(b)
; Simple comment.

; Comment preceded by blank line.
(x y z (qq xx)) (m n o)
(E F g)

(a 1 2 3)
(b (1 2 3))

  (define (f a) (* 2 a))

(define (q x) (-> x 1))

(define (g c d e)
   (really-long-name c)
   (really-long-name d)
   (really-long-name d)
   (really-long-name e))

(define (factorial n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(define (g x)
  (q (* 2 x)))

(define (h x)
  (set! z (r (* 2 x y))))

(set! q (f (- x)))

(defun f (a b)
  (boggle a)
  (boggle b))

(let ((a (cos 0)))
  (fiddle a)
  (faddle (+ 2 a))
  (display (foo)))

(define (read . options) (dostuff options) (morestuff 2) (anotherthing))

(x . y)
(r s . t)
(a b c . d)
(g (x . y))
(h (r s . t))
(f (a b c . d))

(defun this-is-a-really-really-long-name-to-see-if-we-can-handle-defun-overflow (first-param second-param) (+ first-param second-param))

(define this-is-another-really-long-name-to-see-if-we-can-handle-define-overflow (first-param second-param) (+ first-param second-param))

'(a b c d e f g h i j k l m n o p q)

'(a b c d e f g h i j k l m n o p q r t u v w x y z a b c d e f g h i j k l m n o p q r t u v w x y z)

'(a)

'a

((a b) (c d) (e f))

((f (g 0) (h 1) (qqqqq 123 456 798 123 456 789 123 456 789) (z (a b c) (dd dd dd) (ee ee ee ee))) (e z) (g y))

$

\\

<*

*>

$$$

(a (b (c (d (e
(#t
 (let ((item (unit (car x))))
  (let ((item-sameline
         (append
           '(#\space)
           group-list
           '(#\space)
           item)))
   item-sameline
))))))))

(let ((x 5)) (* 2 x) (* 2 x) (* 2 x) (+ x (* 3 x)))

(let ((x 5) (y 7)) (* 2 x) (* 2 x) (* 2 x) (+ x (* 3 x)))

(hello (aaaa bbbb) (cccc dddd) (eeee ffff)
       (gggg hhhh) (iiii jjjj) (kkkk llll)
       . impish)

((+ a b))

(let ((x (a b c d e f g h i j k l m n)) (y (a b c d e f g h i)) (z (za zb zc zd ze zf zg))) (+ x x x x) (* x x x x) x)

; Comment at end of file.
