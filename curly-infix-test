#!/bin/sh

# Test curly-infix.cl.  Also has demo of its use.

# Run this file on a Unix-like system to test curly-infix.cl.
# It should print T for the successful loading of the file,
# followed by a bunch of NILs (the result of successful asserts).
# If an assert fails, it'll complain - then you need to fix it.

clisp << TESTCOMMANDS
(load "curly-infix.cl")

; Test lower-level routines:

(assert (even-and-op-prefix '+ '(+ 4)))
(assert (even-and-op-prefix '+ '(+ 4 + 5)))
(assert (not (even-and-op-prefix '+ '(+ 4 - 5))))
(assert (not (even-and-op-prefix '+ '(+ 4 +))))

(assert (simple-infix-listp '(1 + 2)))
(assert (simple-infix-listp '(1 + 2 + 3)))
(assert (not (simple-infix-listp '(1 + 2 * 3))))
(assert (not (simple-infix-listp '(1 + 2 +))))
(assert (not (simple-infix-listp '(1 +))))
(assert (not (simple-infix-listp '(1))))
(assert (not (simple-infix-listp '())))

(assert (equal (alternating-parameters '(1 2 3)) '(1 3)))
(assert (equal (alternating-parameters '(1 2 3 4 5)) '(1 3 5)))

(assert (equal (transform-simple-infix '(1 + 3)) '(+ 1 3)))
(assert (equal (transform-simple-infix '(1 + 3 + 5)) '(+ 1 3 5)))

; Test {...} itself:

(assert (equal '{2 + 3} '(+ 2 3)))
(assert (equal '{2 * n} '(* 2 n)))
(assert (equal '{x eq y} '(eq x y)))
(assert (equal '{2 + 3 + 4} '(+ 2 3 4)))
(assert (equal '{2 + {3 * 4}} '(+ 2 (* 3 4))))
(assert (equal '{2 + 3 * 4} '(NFX 2 + 3 * 4)))
(assert (equal '{(- x) / 2} '(/ (- x) 2)))
(assert (equal '{x = 3 * 4} '(nfx x = 3 * 4)))
(assert (equal '{x = 3} '(= x 3)))

; Demo its use:

(defun fibfast (n)
  (if {n < 2}
    n
    (fibup n 2 1 0)))

(defun fibup (max count n-1 n-2)
  (if {max = count}
    {n-1 + n-2}
    (fibup max {count + 1} {n-1 + n-2} n-1)))

(setf x 5)
(setf correct {1 <= x <= 10})

; A silly overly-complicated example:
(setf y {2 + {3 * 4} + (if {{x < 9} and {x > 1}} 4 5)})


; Test that demo worked correctly:
(assert (= (fibfast 10) 55))
(assert correct)
(assert (= y 18))

(princ "Tests complete!")
(quit)
TESTCOMMANDS

