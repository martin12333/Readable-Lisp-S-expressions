one

one two

one two three

one two three
  four

one two three
  four
  five

one two three
  four
  five
  six

a b
  c
  d e

a
   ' c d e
      g h i

cos 0

$ a
$ a b
$ a b c
x $ a
x $ a b
x $ a b c
x y $ a
x y $ a b
x y $ a b c
x y z $ a
x y z $ a b
x y z $ a b c

$ a
  b

$ a
  b c

$ a z
  o p

; "$" is different from \\; initial "$" always makes another list. Since:
; \\
;   d
; would create (d), a "$" inserts another (...) level vs \\, making ((d)):
$
  d

; This is (((d e))) :
$
  d e

$
  d e f


fee $ fie
  foe fum

' a b
  c d

m ' n o
  p q

'x y z
  c d

'a b c

a 'c e

m n 'o

\\
  q1

\\
  q1 q2

\\
  q1 q2 q3

\\
  a1 a2
  b1 b2
  c1 c2

\\ a

\\ a
  b

\\ a
  b c


\\ x y z
  aa bb
  cc dd
  ee ff

a b
  c \\ d
  e f \\ g h
  i j k \\ l m n \\ o p q

p \\ q

n a b \\ sing sang sung

n a b \\ sing sang sung
  d e f

use-dash

let <* hello *>
let <* var1 value1 *>
let <* var1 value1 \\ var2 value2 *>

let <* var1 value1 *>
  fact var1

; "$" inside parens is just another atom.

(a b $ c d)

; Initial indents:

; \N> indent-disabled
; 
; \N> indent-disabled1 indent-disabled2
; 
; \N> indent-disabled1 indent-disabled2 indent-disabled3

xyz

($ x)


; NOT WORKING YET - restart after head:
;  define-library (example grid)
;  \>  export make rows cols ref each rename(put! set!)
;  import (scheme base)
;  <* begin
;  
;  define make(n m)
;    do-make()
;  
;  define rows(grid)
;    vector-length(grid)
;  
;  *>
;  \<


fin


