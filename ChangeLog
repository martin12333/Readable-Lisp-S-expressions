2014-11-07 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Bug fix for a subtle rarely-encountered error in the
	  Common Lisp implementation of the sweet-expression reader.
	  Previously, the reader would not work correctly on
	  an n-expression if it was not a symbol, indentation processing
	  is active, and it begins with the punctuation symbols
	  "$", "\", "<", "*", or ".".
	  For example, (* 4 5) and {4 * 5} worked fine, but *(4 5) did not.
	  This bug took a long time to detect, because it
	  didn't affect infix or traditional s-expression
	  notation, and this is normally how such expressions would be used.
	  Also, the neoteric reader worked just fine.

2014-10-18 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Version 1.0.5.
	* Common Lisp implementation sweet-expression reader now handles
	  expressions that end without an EOL.
	* Common Lisp implementation adds basic ability to print
	  readable expressions, e.g., write-readable.

2014-07-04 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Version 1.0.4. Fixes regression in guile 2.
	  Adds other portability tweaks to make it work on more systems.
	* Update documents.  E.g., tutorial notes '!' indent chars.

2014-06-15 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Version 1.0.2.  Various minor improvements,
	  primarily in the documentation and Scheme implementation,
	  as listed below.
	* Various minor Scheme bug fixes, e.g., improve EOF handling during
	  symbol reading, fix detection of unsupported #.
	* Many portability improvements, especially for Chicken Scheme and
	  rscheme.  E.G., remove all "#:" in source,
	  change "throw" to "raise", rename internal "body" to "read-body".
	  Modify sweet-run so it works unchanged on Mac OS Darwin.
	* Many changes to eliminate warnings in various Schemes, e.g.,
	  change (cond .. #t) to (cond .. else); either is legal Scheme,
	  but chicken Scheme emits warnings on the former.
	* Add the following as delimiters: #\' and #\` and #\.
          These are not required to be delimiters in Scheme, but
	  they can be, and doing so means that we can detect syntax errors
	  of very dodgy constructs.  This means that x'y will be
	  considered an error, not a 3-char symbol.  We can already express
	  that as |x'y|, and (x 'y) or x('y) work for making a list.
	* Optimize read-digits.
	* Improve Scheme error reporting when giving "Unexpected text
	  after n-expression" by reporting the next (peeked) character.
	* Add #!keyword-prefix and #!keyword-suffix support so can handle
	  syntax like STUFF: and :STUFF.
	* Modify Scheme sweet-run so that it returns the program exit code.
	* Add type annotations in chicken format, and ensure it does not
	  interfere with other Schemes like guile.

2013-10-14 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Version 1.0.0.
	* Provide various minor improvements to the documentation.
	  In particular, we explain how Common Lisp library users
	  can use QuickLisp, and include more hypertext cross-links
	  to help users find the information they want.
	  Several places highlight the "Install-howto" files, to help
	  people easily find the installation instructions.

2013-10-05 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Version 0.9.4.
	* Make configuration is now MUCH more automatic.  As much as possible,
	  we do everything automatically, and warn about problems during
	  the configuration process.
	* Improve portability, e.g., "env" need not be in /usr/bin.
	* Provide 'make clisp-asdf' to configure clisp to use ASDF
	  for this user.
	* Create Common Lisp front-end programs that automatically work,
	  just like the guile tools

2013-09-26 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Clearer installation instructions.
	* Placed normal installation instructions in a single
	  separate file "Install-howto.md". Previously this was duplicated
	  badly in multiple files (README and both tutorials).
	  Technical details are still in INSTALL.
	* Much better auto-detection of guile "site" directory (GUILE_SITE);
	* it should now "just work" for both normal cases
	   and with "make distcheck".
	* New "make from-wiki" command makes it easier to keep mirrored
	  markdown files up-to-date with the wiki.
	* Fixed rpm .spec file error in the common lisp uninstall script.
	* New configure options, such as "--without-scsh" and GUILE_SITE.
	* Generate HTML from the markdown (.md) files, so that people can
	  read the prettier-to-view HTML files.
	* Include generated HTML from markdown in tarball and installation.
	* Modify rpm .spec files to fix preun error in Common Lisp library.

2013-09-10 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Includes the final version of SRFI-110, which defines
	  sweet-expressions for Scheme.  The final SRFI-110 includes a
	  few minor improvements (e.g., improved examples).
	* Add "Makefile-demo" to tarball distribution
	* Presentation notes that the Common Lisp code is MIT-licensed

2013-08-25 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.9.2
	  - Modify grammar and implementation to support "#;"+space|tab
	    the same way as abbreviation+space|tab.
	    Now "#;", followed by space or tab, comments out the
	    next *sweet-expression* (not the next *neoteric-expression*).
	    This is per a comment by Mark H. Weaver.
	  - Add code+grammar rules, and supporting procedures,
	    to handle empty cases (for #;+space|tab handling)
	  - Better error detection: Forbid lines with >1 n-expr on a line
	    where the last expression is "."
	  - Better error detection: In guile implementation forbid unescaped
	    FF/VT when not on their own line (when outside a collecting list).
	    This has been forbidden in the grammar for a long time,
	    but now the guile implementation detects it and complains about it
	  - Better Common Lisp performance. Several tail recursions were
	    turned into loops, which speeds up some implementations.
	    The switch from tail recursion to "loop" in neoteric.lisp's
	    symbol reading, all by itself, produced a 5% performance
	    improvement when using clisp.
	  - Lots of changes to SRFI-110 to make it simpler, clearer, and
	    even more precise.  In several places tried to create
	    consistent terminology, e.g., rename "empty tag" to "empty value",
	    and change "empty line" to "blank line" (so that an empty line
	    is not confused with other "empty" things).  The phrase
	    "returns [Object v]" is no longer repeated in every rule
	    that produces a result, which makes it easier to read.
	    Many of these changes originate in comments
	    by Mark H. Weaver and John Cowan.
	  - SRFI-110 now *REQUIRES* SRFI-30 (#|...|#) and SRFI-62 (#;datum),
	    instead of being a SHOULD.  The sample implementations
	    implement them anyway, but by requiring them, SRFI-110 users
	    can depend on them.
	  - Added code to work around clisp REPL bug in initial-indent mode
	    (the code has no effect, but also causes no harm, in
	    other implementations like SBCL).
	  - Modified sweet-clisp to patch its REPL (by default) to work
	    around other clisp REPL bugs, and added an option to inhibit
	    this behavior.  Otherwise clisp will throw away a second t-expr
	    if there is no blank line between the first and second t-expr.
	  - Changed code in several places to make them easier to follow.
	    In particular, new macro let-splitter simplifies code.
	  - Modified sweet.g to eliminate spurious ANTLR warning message
	  - Overall simpler grammar (in draft SRFI-110 and in implementation).
	    This is in part a response to comments by Mark H. Weaver.
	    There are more production rules, but each one is simpler,
	    and "hspaces*" became "hs" (good because it happens often)
	  - Change production names in a few cases to make them clearer.
	    E.G., "head" -> "line_exprs", "rest" -> "rest_of_line",
	    "collecting_tail" -> "collecting_content".
	  - Rename production "ignorable" into "skippable".  Common Lisp
	    uses "ignorable" for something else, and having 2 meanings for
	    one phrase - while possible - was confusing.  It's easier to
	    just rename things, so that one term works everywhere.
	  - Added "sweet-sbcl" convenience script
	  - Include final version of SRFI-105
	  - "make distcheck" bugs fixed
	  - Add sample *.spec files for rpm-based distributions
	  - Add new "configure" options:
	    * --without-guile         disable support for guile
	    * --without-common-lisp   disable support for Common Lisp
	    * --without-clisp         disable support for clisp
	  - As always, more tests.  In particular, there are now a number
	    of tests for error conditions, to make sure they produce errors


2013-06-17 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.9.1
	  - Fixes Common Lisp tutorial, in particular, an
	    "enable-sweet" was incorrectly "enable-neoteric" making all
	    later text not work if you followed the tutorial exactly :-(.
	  - Many improvements to draft SRFI-110.html
	  - Presentation readable-s-expressions.odp has more Common Lisp info
	    and nicer formatting
	  - Common Lisp implementation improvements, e.g.,
	    better handling of EOF, examples no longer use our own ASDF,
	    and enable-... have better performance if already enabled.
	  - Add "factorial.lisp", a simple demo of how to use the
	    sweet-expressions in Common Lisp files.

2013-05-09 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.9.0
	  - Adds a Common Lisp implementation (which was transliterated
	    from the Scheme implementation)
	  - Lines with at least one "!", and otherwise only indent chars,
	    are ignored, per SRFI-110 discussion
	  - Includes a draft of SRFI-110

2013-03-30 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.7.1.
	  - Allows a collecting list after ".", e.g. "a b . <* c *>".
	    The draft SRFI-110 specifically gives this as an example,
	     so it'd be nice if the easily-downloaded version
	     actually supported it.
	  - Initial indents now allow "!"
	  - Adds a new tool, "diff-s-sweet"
	  - The Scheme implementation detects "*>" without matching "<*".
	  - Updates the draft SRFI-110.

2013-03-07 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.7.0.
	  - Includes support for <* ... *> collecting lists, with
	    both Scheme and ANTLR implementations of sweet-expressions

2012-11-25 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.6.0.
	* Change to $nfx$ and $bracket-apply$ (from nfx and bracket-apply)
	* Fix reference code to make f{...}(...) be left-to-right
	   (the {...} pattern was previously handled, incorrectly,
	   as right-to-left)
	* SRFI-105: Separate rationale from design rationale

2012-08-25 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.5.0.
	  - e{} is now (e)
	  - {} is now ()
	  - {e} is now e
	  - {e1 e2} is now (e1 e2).

2012-08-10 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.4.0.
	  - Add initial "$" on a line

2012-08-02 Alan Manuel Gloria
	* Fixed multi-line comment processing
	* configuration no longer depends on guile-config (simplifies install)

2012-08-01 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Release of readable software version 0.3.0.
	* Did initial autoconfiscation
	* Set non-whitespace-indent char to simply "!"
	* SPLIT symbol is now \\ instead of \
	* Add presentation to distribution

2006-07-05 David A. Wheeler <dwheeler, at, dwheeler.com>
	* Initial import

